name             = re-engine-GNU
author           = Jean-Damien Durand <jeandamiendurand@free.fr>
license          = Perl_5
copyright_holder = Jean-Damien Durand
copyright_year   = 2015

; ---------------------------------------------------
; We use @Starter::Git with the following variations:
; ---------------------------------------------------

; Next version is provided by Git::NextVersion
; ---------------------------------------------------
[Git::NextVersion]
version_regexp = ^v?(\d+\.\d+)$

; "# VERSION" and "# AUTHORITY" annotations
; ---------------------------------------------------
[OurPkgVersion]
[Authority]
locate_comment = 1

; Pod are managed using Pod::Weaver::PluginBundle::RJBS
; ---------------------------------------------------
; - Because he knows how to insert Contributor section before Legal section
; - We add that explicitly to DevelopRequires because it seems it is not automatically discovered.
[Git::Contributors]
[PodWeaver]
config_plugin = @RJBS
[Prereqs / DevelopRequires ]
Pod::Weaver::PluginBundle::RJBS = 0

; Add authordeps as develop/requires
; ---------------------------------------------------
[Prereqs::AuthorDeps]

; Add xt tests
; ---------------------------------------------------
[Test::Perl::Critic]     ; xt/author/critic.t
[MetaTests]              ; xt/author/distmeta.t
[Test::EOL]              ; xt/author/eol.t
[Test::MinimumVersion]   ; xt/author/minimum-version.t
[MojibakeTests]          ; xt/author/mojibake.t
[Test::NoTabs]           ; xt/author/no-tabs.t
[PodCoverageTests]       ; xt/author/pod-coverage.t
[Test::Pod::LinkCheck]   ; xt/author/pod-linkcheck.t
[Test::Portability]      ; xt/author/portability.t
options = test_one_dot = 0
[Test::Synopsis]         ; xt/author/synopsis.t
[Test::Version]          ; xt/author/test-version.t
[Test::CPAN::Changes]    ; xt/release/cpan-changes.t
[Test::Kwalitee]         ; xt/release/kwalitee.t
[Test::CPAN::Meta::JSON] ; xt/release/meta-json.t

; Meta resources use [AutoMetaResources] convenient %{dist} to set homepage, [GitHub::Meta] for the rest
; ---------------------------------------------------
[AutoMetaResources]
homepage = https://metacpan.org/release/%{dist}
[GitHub::Meta]
homepage = 0

; Find prereqs from code with special hooks to the configure phase
; ---------------------------------------------------
[FileFinder::ByName / :etc]
dir = etc
[AutoPrereqs]
configure_finder = :etc

; Determine minimum perl version
; ---------------------------------------------------
[MinimumPerl]

; Generate a cpanfile
; ---------------------------------------------------
[CPANFile]

; Generate a Changes file
; ---------------------------------------------------
[ChangelogFromGit::CPAN::Changes]
file_name = Changes
group_by_author = 1 ; default 0
show_author_email = 1 ; default 0
tag_regexp  = ^v?(\d+\.\d+)$

; @Starter::Git Bundle with regeneration of:
; Makefile.PL
; META.json
; README.pod
; ---------------------------------------------------
[@Starter::Git]
revision = 5
-remove = Pod2Readme
Test::Compile.xt_mode = 0
Git::Check.allow_dirty[0] = Changes
Git::Check.allow_dirty[1] = META.json
Git::Check.allow_dirty[2] = README.pod
Git::Check.allow_dirty[3] = Makefile.PL
Git::Check.allow_dirty[4] = cpanfile
Git::Check.untracked_files = warn ; For the case where generated files do not yet exist
regenerate = Changes
regenerate = META.json
regenerate = README.pod
regenerate = Makefile.PL
regenerate = cpanfile
installer = MakeMaker::Awesome
MakeMaker::Awesome.header = use File::Spec;
MakeMaker::Awesome.WriteMakefile_arg[0] = OBJECT => 'GNU$(OBJ_EXT)'
MakeMaker::Awesome.WriteMakefile_arg[1] = DEFINE => '-DNDEBUG -DNEED_newSVpvn_flags'
MakeMaker::Awesome.WriteMakefile_arg[2] = INC => '-I'.File::Spec->curdir
MakeMaker::Awesome.WriteMakefile_arg[3] = clean => { FILES => "config_autoconf.h config_autoconf.log config_REGEXP.h config_REGEXP_wrapped.h config_REGEXP_wrapped.log" }
MakeMaker::Awesome.delimiter = |
MakeMaker::Awesome.footer[0] = |package MY;
MakeMaker::Awesome.footer[1] = |sub postamble {
MakeMaker::Awesome.footer[2] = |    my $self = shift;
MakeMaker::Awesome.footer[3] = |    my $config_autoconf = File::Spec->catfile('etc', 'config_autoconf.pl');
MakeMaker::Awesome.footer[4] = |    my $config_REGEXP = File::Spec->catfile('etc', 'config_REGEXP.pl');
MakeMaker::Awesome.footer[5] = |    return $self->SUPER::postamble . "\nconfig_autoconf.h:\n\t\$(PERLRUN) $config_autoconf\n\nconfig_REGEXP.h:\n\t\$(PERLRUN) $config_REGEXP\n\nGNU\$(OBJ_EXT): config_autoconf.h config_REGEXP.h\n";
MakeMaker::Awesome.footer[6] = |}

; Do not require Thread on non-threaded perls
; ---------------------------------------------------
[DynamicPrereqs]
-delimiter = |
-raw = |use Config;
-raw = |if (! $Config{usethreads}) {
-raw = |  foreach (qw/PREREQ_PM BUILD_REQUIRES TEST_REQUIRES/) {
-raw = |    delete($WriteMakefileArgs{$_}{Thread}) if (exists($WriteMakefileArgs{$_}));
-raw = |    delete($FallbackPrereqs{$_}{Thread})   if (exists($FallbackPrereqs{$_}));
-raw = |  }
-raw = |}
